name: Create Issues from Files

on:
  workflow_dispatch: {}
  push:
    paths:
      - '.github/issues/**'

jobs:
  create-issues:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create issues from .github/issues/*.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          python3 - <<'PY'
import glob, os, sys, requests, json
repo = os.environ['REPO']
token = os.environ['GITHUB_TOKEN']
headers = {
  'Authorization': f'Bearer {token}',
  'Accept': 'application/vnd.github+json'
}

issues_dir = '.github/issues'
files = sorted(glob.glob(os.path.join(issues_dir, '*.md')))

# fetch existing open issues titles to avoid duplicates
existing = set()
page = 1
while True:
    r = requests.get(f'https://api.github.com/repos/{repo}/issues', headers=headers, params={'state':'open','per_page':100,'page':page})
    if r.status_code != 200:
        print('Failed to list issues', r.status_code, r.text)
        sys.exit(1)
    data = r.json()
    if not data:
        break
    for it in data:
        existing.add(it.get('title',''))
    page += 1

for path in files:
    with open(path, 'r', encoding='utf-8') as f:
        lines = f.read().splitlines()
    if not lines:
        continue
    # parse Title: ... line
    title = None
    body_lines = []
    for i,ln in enumerate(lines):
        if i==0 and ln.lower().startswith('title:'):
            title = ln.split(':',1)[1].strip()
            # body starts after a blank line if present, else from line 1
            body_lines = lines[1:]
            break
    if not title:
        print(f'skipping {path}, no Title: header')
        continue
    if title in existing:
        print(f'Issue already exists: {title}')
        continue
    body = '\n'.join(body_lines).strip()
    payload = {'title': title, 'body': body, 'labels': ['auto-created']}
    r = requests.post(f'https://api.github.com/repos/{repo}/issues', headers=headers, data=json.dumps(payload))
    if r.status_code in (200,201):
        print('Created issue:', title)
    else:
        print('Failed to create issue', title, r.status_code, r.text)
        sys.exit(1)
PY
